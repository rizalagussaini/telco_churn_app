{
    "sourceFile": "app.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1748160907356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748160930730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \r\n # Load trained model\r\n model = joblib.load('model.pkl')\r\n \r\n-st.title(\"Prediksi Churn Pelanggan Telco üì±\")\r\n+st.title(\"üìä Prediksi Churn Pelanggan Telco üì±\")\r\n \r\n st.write(\"Masukkan data pelanggan untuk memprediksi apakah pelanggan akan churn atau tidak.\")\r\n \r\n # Form input data\r\n"
                },
                {
                    "date": 1748164164852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,42 @@\n import streamlit as st\r\n import pandas as pd\r\n import joblib\r\n \r\n-# Load trained model\r\n+# Load model\r\n model = joblib.load('model.pkl')\r\n \r\n-st.title(\"üìä Prediksi Churn Pelanggan Telco üì±\")\r\n+st.title(\"üìä Aplikasi Prediksi Pelanggan Churn (Telco)\")\r\n \r\n-st.write(\"Masukkan data pelanggan untuk memprediksi apakah pelanggan akan churn atau tidak.\")\r\n+st.sidebar.header(\"üìù Isi Data Pelanggan\")\r\n \r\n-# Form input data\r\n-with st.form(\"churn_form\"):\r\n-    SeniorCitizen = st.selectbox(\"Apakah pelanggan lansia?\", [\"Yes\", \"No\"])\r\n-    Partner = st.selectbox(\"Memiliki pasangan?\", [\"Yes\", \"No\"])\r\n-    Dependents = st.selectbox(\"Memiliki tanggungan?\", [\"Yes\", \"No\"])\r\n-    PhoneService = st.selectbox(\"Menggunakan layanan telepon?\", [\"Yes\", \"No\"])\r\n-    MultipleLines = st.selectbox(\"Multiple Lines\", [\"Yes\", \"No\", \"No phone service\"])\r\n-    InternetService = st.selectbox(\"Jenis layanan internet\", [\"DSL\", \"Fiber optic\", \"No\"])\r\n-    OnlineSecurity = st.selectbox(\"Online Security\", [\"Yes\", \"No\", \"No internet service\"])\r\n-    OnlineBackup = st.selectbox(\"Online Backup\", [\"Yes\", \"No\", \"No internet service\"])\r\n-    DeviceProtection = st.selectbox(\"Device Protection\", [\"Yes\", \"No\", \"No internet service\"])\r\n-    TechSupport = st.selectbox(\"Tech Support\", [\"Yes\", \"No\", \"No internet service\"])\r\n-    StreamingTV = st.selectbox(\"Streaming TV\", [\"Yes\", \"No\", \"No internet service\"])\r\n-    StreamingMovies = st.selectbox(\"Streaming Movies\", [\"Yes\", \"No\", \"No internet service\"])\r\n-    Contract = st.selectbox(\"Jenis kontrak\", [\"Month-to-month\", \"One year\", \"Two year\"])\r\n-    PaperlessBilling = st.selectbox(\"Paperless Billing?\", [\"Yes\", \"No\"])\r\n-    PaymentMethod = st.selectbox(\"Metode Pembayaran\", [\r\n-        \"Electronic check\", \"Mailed check\", \"Bank transfer (automatic)\", \"Credit card (automatic)\"\r\n+def user_input():\r\n+    SeniorCitizen = st.sidebar.radio(\"Apakah pelanggan lansia?\", ['Tidak', 'Iya'])\r\n+    Partner = st.sidebar.radio(\"Memiliki pasangan?\", ['Iya', 'Tidak'])\r\n+    Dependents = st.sidebar.radio(\"Memiliki tanggungan?\", ['Iya', 'Tidak'])\r\n+    PhoneService = st.sidebar.radio(\"Menggunakan layanan telepon?\", ['Iya', 'Tidak'])\r\n+    MultipleLines = st.sidebar.selectbox(\"Layanan telepon ganda\", ['Tidak ada layanan telepon', 'Iya', 'Tidak'])\r\n+    InternetService = st.sidebar.selectbox(\"Jenis layanan internet\", ['DSL', 'Fiber optic', 'Tidak ada'])\r\n+    OnlineSecurity = st.sidebar.selectbox(\"Keamanan online\", ['Iya', 'Tidak', 'Tidak ada layanan internet'])\r\n+    OnlineBackup = st.sidebar.selectbox(\"Backup online\", ['Iya', 'Tidak', 'Tidak ada layanan internet'])\r\n+    DeviceProtection = st.sidebar.selectbox(\"Perlindungan perangkat\", ['Iya', 'Tidak', 'Tidak ada layanan internet'])\r\n+    TechSupport = st.sidebar.selectbox(\"Bantuan teknis\", ['Iya', 'Tidak', 'Tidak ada layanan internet'])\r\n+    StreamingTV = st.sidebar.selectbox(\"Layanan streaming TV\", ['Iya', 'Tidak', 'Tidak ada layanan internet'])\r\n+    StreamingMovies = st.sidebar.selectbox(\"Layanan streaming film\", ['Iya', 'Tidak', 'Tidak ada layanan internet'])\r\n+    Contract = st.sidebar.selectbox(\"Jenis kontrak\", ['Bulanan', '1 Tahun', '2 Tahun'])\r\n+    PaperlessBilling = st.sidebar.radio(\"Penagihan tanpa kertas?\", ['Iya', 'Tidak'])\r\n+    PaymentMethod = st.sidebar.selectbox(\"Metode pembayaran\", [\r\n+        'Cek elektronik', 'Cek pos', 'Transfer otomatis (Bank)', 'Kartu kredit otomatis'\r\n     ])\r\n-    MonthlyCharges = st.number_input(\"Monthly Charges\", min_value=0.0)\r\n-    TotalCharges = st.number_input(\"Total Charges\", min_value=0.0)\r\n-    tenure_group = st.selectbox(\"Tenure Group (lama berlangganan)\", [\r\n-        \"1 - 12\", \"13 - 24\", \"25 - 36\", \"37 - 48\", \"49 - 60\", \"61 - 72\"\r\n+    MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (Rp)\", min_value=0.0)\r\n+    TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0)\r\n+    tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n+        '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n     ])\r\n \r\n-    submitted = st.form_submit_button(\"Prediksi\")\r\n-\r\n-# Ketika tombol ditekan\r\n-if submitted:\r\n-    input_dict = {\r\n-        'SeniorCitizen': 1 if SeniorCitizen == \"Yes\" else 0,\r\n+    # Konversi input ke bentuk yang sesuai model\r\n+    data = {\r\n+        'SeniorCitizen': 1 if SeniorCitizen == 'Iya' else 0,\r\n         'Partner': Partner,\r\n         'Dependents': Dependents,\r\n         'PhoneService': PhoneService,\r\n         'MultipleLines': MultipleLines,\r\n@@ -50,33 +46,39 @@\n         'DeviceProtection': DeviceProtection,\r\n         'TechSupport': TechSupport,\r\n         'StreamingTV': StreamingTV,\r\n         'StreamingMovies': StreamingMovies,\r\n-        'Contract': Contract,\r\n+        'Contract': 'Month-to-month' if Contract == 'Bulanan' else ('One year' if Contract == '1 Tahun' else 'Two year'),\r\n         'PaperlessBilling': PaperlessBilling,\r\n-        'PaymentMethod': PaymentMethod,\r\n+        'PaymentMethod': (\r\n+            'Electronic check' if PaymentMethod == 'Cek elektronik' else\r\n+            'Mailed check' if PaymentMethod == 'Cek pos' else\r\n+            'Bank transfer (automatic)' if PaymentMethod == 'Transfer otomatis (Bank)' else\r\n+            'Credit card (automatic)'\r\n+        ),\r\n         'MonthlyCharges': MonthlyCharges,\r\n         'TotalCharges': TotalCharges,\r\n         'tenure_group': tenure_group\r\n     }\r\n \r\n-    # Konversi ke DataFrame\r\n-    df_input = pd.DataFrame([input_dict])\r\n+    return pd.DataFrame([data])\r\n \r\n-    # One-hot encoding\r\n-    cat_cols = df_input.select_dtypes(include='object').columns\r\n-    df_encoded = pd.get_dummies(df_input, columns=cat_cols)\r\n+# Ambil input user\r\n+input_df = user_input()\r\n \r\n-    # Lengkapi fitur yang dibutuhkan model\r\n-    model_features = model.get_booster().feature_names\r\n-    for col in set(model_features) - set(df_encoded.columns):\r\n-        df_encoded[col] = 0\r\n-    df_encoded = df_encoded[model_features]\r\n+# One-hot encoding\r\n+input_encoded = pd.get_dummies(input_df)\r\n \r\n-    # Prediksi\r\n-    prediction = model.predict(df_encoded)[0]\r\n-    proba = model.predict_proba(df_encoded)[0][1]\r\n+# Sesuaikan fitur agar cocok dengan model\r\n+model_features = model.get_booster().feature_names\r\n+for col in set(model_features) - set(input_encoded.columns):\r\n+    input_encoded[col] = 0\r\n+input_encoded = input_encoded[model_features]\r\n \r\n-    if prediction == 1:\r\n-        st.error(f\"‚ö†Ô∏è Pelanggan kemungkinan akan **CHURN** (Probabilitas: {proba:.2f})\")\r\n-    else:\r\n-        st.success(f\"‚úÖ Pelanggan kemungkinan **TIDAK CHURN** (Probabilitas: {proba:.2f})\")\r\n+# Prediksi\r\n+prediction = model.predict(input_encoded)\r\n+proba = model.predict_proba(input_encoded)\r\n+\r\n+# Output hasil prediksi\r\n+st.subheader(\"üîç Hasil Prediksi\")\r\n+st.write(\"**Status Pelanggan:**\", \"üö´ Churn\" if prediction[0] == 1 else \"‚úÖ Tidak Churn\")\r\n+st.write(\"**Probabilitas Churn:**\", f\"{proba[0][1]*100:.2f}%\")\r\n"
                },
                {
                    "date": 1748164941729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     PaperlessBilling = st.sidebar.radio(\"Penagihan tanpa kertas?\", ['Iya', 'Tidak'])\r\n     PaymentMethod = st.sidebar.selectbox(\"Metode pembayaran\", [\r\n         'Cek elektronik', 'Cek pos', 'Transfer otomatis (Bank)', 'Kartu kredit otomatis'\r\n     ])\r\n-    MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (Rp)\", min_value=0.0)\r\n+    MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (USD)\", min_value=0.0)\r\n     TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0)\r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n     ])\r\n"
                },
                {
                    "date": 1748165108666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     PaymentMethod = st.sidebar.selectbox(\"Metode pembayaran\", [\r\n         'Cek elektronik', 'Cek pos', 'Transfer otomatis (Bank)', 'Kartu kredit otomatis'\r\n     ])\r\n     MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (USD)\", min_value=0.0)\r\n-    TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0)\r\n+    TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (USd)\", min_value=0.0)\r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n     ])\r\n \r\n"
                },
                {
                    "date": 1748165116465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     PaymentMethod = st.sidebar.selectbox(\"Metode pembayaran\", [\r\n         'Cek elektronik', 'Cek pos', 'Transfer otomatis (Bank)', 'Kartu kredit otomatis'\r\n     ])\r\n     MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (USD)\", min_value=0.0)\r\n-    TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (USd)\", min_value=0.0)\r\n+    TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (USD)\", min_value=0.0)\r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n     ])\r\n \r\n"
                },
                {
                    "date": 1748165124966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     PaperlessBilling = st.sidebar.radio(\"Penagihan tanpa kertas?\", ['Iya', 'Tidak'])\r\n     PaymentMethod = st.sidebar.selectbox(\"Metode pembayaran\", [\r\n         'Cek elektronik', 'Cek pos', 'Transfer otomatis (Bank)', 'Kartu kredit otomatis'\r\n     ])\r\n-    MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (USD)\", min_value=0.0)\r\n+    #MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (USD)\", min_value=0.0)\r\n     TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (USD)\", min_value=0.0)\r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n     ])\r\n"
                },
                {
                    "date": 1748165146960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,10 @@\n     PaymentMethod = st.sidebar.selectbox(\"Metode pembayaran\", [\r\n         'Cek elektronik', 'Cek pos', 'Transfer otomatis (Bank)', 'Kartu kredit otomatis'\r\n     ])\r\n     #MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (USD)\", min_value=0.0)\r\n-    TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (USD)\", min_value=0.0)\r\n+    #TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (USD)\", min_value=0.0)\r\n+    \r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n     ])\r\n \r\n"
                },
                {
                    "date": 1748165160114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,15 @@\n         'Cek elektronik', 'Cek pos', 'Transfer otomatis (Bank)', 'Kartu kredit otomatis'\r\n     ])\r\n     #MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (USD)\", min_value=0.0)\r\n     #TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (USD)\", min_value=0.0)\r\n-    \r\n+    monthly_rp = st.sidebar.number_input(\"Biaya bulanan (Rp)\", min_value=0.0, value=160000.0, step=1000.0)\r\n+    total_rp = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0, value=1600000.0, step=1000.0)\r\n+\r\n+    # Konversi ke USD\r\n+    MonthlyCharges = monthly_rp / 16000\r\n+    TotalCharges = total_rp / 16000\r\n+\r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n     ])\r\n \r\n"
                },
                {
                    "date": 1748165339082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n         'Cek elektronik', 'Cek pos', 'Transfer otomatis (Bank)', 'Kartu kredit otomatis'\r\n     ])\r\n     #MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (USD)\", min_value=0.0)\r\n     #TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (USD)\", min_value=0.0)\r\n-    monthly_rp = st.sidebar.number_input(\"Biaya bulanan (Rp)\", min_value=0.0, value=160000.0, step=1000.0)\r\n-    total_rp = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0, value=1600000.0, step=1000.0)\r\n+    #monthly_rp = st.sidebar.number_input(\"Biaya bulanan (Rp)\", min_value=0.0, value=160000.0, step=1000.0)\r\n+    #total_rp = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0, value=1600000.0, step=1000.0)\r\n \r\n     # Konversi ke USD\r\n     MonthlyCharges = monthly_rp / 16000\r\n     TotalCharges = total_rp / 16000\r\n"
                },
                {
                    "date": 1748165357021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     #monthly_rp = st.sidebar.number_input(\"Biaya bulanan (Rp)\", min_value=0.0, value=160000.0, step=1000.0)\r\n     #total_rp = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0, value=1600000.0, step=1000.0)\r\n \r\n     # Konversi ke USD\r\n-    MonthlyCharges = monthly_rp / 16000\r\n+    #MonthlyCharges = monthly_rp / 16000\r\n     TotalCharges = total_rp / 16000\r\n \r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n"
                },
                {
                    "date": 1748165366089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,27 @@\n     #total_rp = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0, value=1600000.0, step=1000.0)\r\n \r\n     # Konversi ke USD\r\n     #MonthlyCharges = monthly_rp / 16000\r\n-    TotalCharges = total_rp / 16000\r\n+    #TotalCharges = total_rp / 16000\r\n \r\n+    import locale\r\n+locale.setlocale(locale.LC_ALL, 'id_ID.UTF-8')  # Format Indonesia\r\n+\r\n+# Input sebagai teks dengan format ribuan\r\n+monthly_rp_str = st.sidebar.text_input(\"Biaya bulanan (Rp)\", \"160.000\")\r\n+total_rp_str = st.sidebar.text_input(\"Total biaya selama ini (Rp)\", \"1.600.000\")\r\n+\r\n+# Hapus titik dan konversi ke float\r\n+monthly_rp = float(monthly_rp_str.replace(\".\", \"\").replace(\",\", \".\"))\r\n+total_rp = float(total_rp_str.replace(\".\", \"\").replace(\",\", \".\"))\r\n+\r\n+# Konversi ke USD\r\n+MonthlyCharges = monthly_rp / 16000\r\n+TotalCharges = total_rp / 16000\r\n+\r\n+\r\n+\r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n     ])\r\n \r\n"
                },
                {
                    "date": 1748165377783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,24 +36,22 @@\n     #MonthlyCharges = monthly_rp / 16000\r\n     #TotalCharges = total_rp / 16000\r\n \r\n     import locale\r\n-locale.setlocale(locale.LC_ALL, 'id_ID.UTF-8')  # Format Indonesia\r\n+    locale.setlocale(locale.LC_ALL, 'id_ID.UTF-8')  # Format Indonesia\r\n \r\n-# Input sebagai teks dengan format ribuan\r\n-monthly_rp_str = st.sidebar.text_input(\"Biaya bulanan (Rp)\", \"160.000\")\r\n-total_rp_str = st.sidebar.text_input(\"Total biaya selama ini (Rp)\", \"1.600.000\")\r\n+    # Input sebagai teks dengan format ribuan\r\n+    monthly_rp_str = st.sidebar.text_input(\"Biaya bulanan (Rp)\", \"160.000\")\r\n+    total_rp_str = st.sidebar.text_input(\"Total biaya selama ini (Rp)\", \"1.600.000\")\r\n \r\n-# Hapus titik dan konversi ke float\r\n-monthly_rp = float(monthly_rp_str.replace(\".\", \"\").replace(\",\", \".\"))\r\n-total_rp = float(total_rp_str.replace(\".\", \"\").replace(\",\", \".\"))\r\n+    # Hapus titik dan konversi ke float\r\n+    monthly_rp = float(monthly_rp_str.replace(\".\", \"\").replace(\",\", \".\"))\r\n+    total_rp = float(total_rp_str.replace(\".\", \"\").replace(\",\", \".\"))\r\n \r\n-# Konversi ke USD\r\n-MonthlyCharges = monthly_rp / 16000\r\n-TotalCharges = total_rp / 16000\r\n+    # Konversi ke USD\r\n+    MonthlyCharges = monthly_rp / 16000\r\n+    TotalCharges = total_rp / 16000\r\n \r\n-\r\n-\r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n     ])\r\n \r\n"
                },
                {
                    "date": 1748165582978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,23 +35,9 @@\n     # Konversi ke USD\r\n     #MonthlyCharges = monthly_rp / 16000\r\n     #TotalCharges = total_rp / 16000\r\n \r\n-    import locale\r\n-    locale.setlocale(locale.LC_ALL, 'id_ID.UTF-8')  # Format Indonesia\r\n \r\n-    # Input sebagai teks dengan format ribuan\r\n-    monthly_rp_str = st.sidebar.text_input(\"Biaya bulanan (Rp)\", \"160.000\")\r\n-    total_rp_str = st.sidebar.text_input(\"Total biaya selama ini (Rp)\", \"1.600.000\")\r\n-\r\n-    # Hapus titik dan konversi ke float\r\n-    monthly_rp = float(monthly_rp_str.replace(\".\", \"\").replace(\",\", \".\"))\r\n-    total_rp = float(total_rp_str.replace(\".\", \"\").replace(\",\", \".\"))\r\n-\r\n-    # Konversi ke USD\r\n-    MonthlyCharges = monthly_rp / 16000\r\n-    TotalCharges = total_rp / 16000\r\n-\r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n     ])\r\n \r\n"
                },
                {
                    "date": 1748165590581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,14 @@\n         'Cek elektronik', 'Cek pos', 'Transfer otomatis (Bank)', 'Kartu kredit otomatis'\r\n     ])\r\n     #MonthlyCharges = st.sidebar.number_input(\"Biaya bulanan (USD)\", min_value=0.0)\r\n     #TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (USD)\", min_value=0.0)\r\n-    #monthly_rp = st.sidebar.number_input(\"Biaya bulanan (Rp)\", min_value=0.0, value=160000.0, step=1000.0)\r\n-    #total_rp = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0, value=1600000.0, step=1000.0)\r\n+    monthly_rp = st.sidebar.number_input(\"Biaya bulanan (Rp)\", min_value=0.0, value=160000.0, step=1000.0)\r\n+    total_rp = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0, value=1600000.0, step=1000.0)\r\n \r\n     # Konversi ke USD\r\n-    #MonthlyCharges = monthly_rp / 16000\r\n-    #TotalCharges = total_rp / 16000\r\n+    MonthlyCharges = monthly_rp / 16000\r\n+    TotalCharges = total_rp / 16000\r\n \r\n \r\n     tenure_group = st.sidebar.selectbox(\"Lama berlangganan\", [\r\n         '1 - 12', '13 - 24', '25 - 36', '37 - 48', '49 - 60', '61 - 72'\r\n"
                },
                {
                    "date": 1748165888947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,11 @@\n     #TotalCharges = st.sidebar.number_input(\"Total biaya selama ini (USD)\", min_value=0.0)\r\n     monthly_rp = st.sidebar.number_input(\"Biaya bulanan (Rp)\", min_value=0.0, value=160000.0, step=1000.0)\r\n     total_rp = st.sidebar.number_input(\"Total biaya selama ini (Rp)\", min_value=0.0, value=1600000.0, step=1000.0)\r\n \r\n-    \r\n+    # Tampilkan hasil terformat\r\n+st.sidebar.markdown(f\"**‚û°Ô∏è Biaya Bulanan:** Rp {monthly_rp:,.2f}\".replace(\",\", \".\").replace(\".\", \",\", 1))\r\n+st.sidebar.markdown(f\"**‚û°Ô∏è Total Biaya:** Rp {total_rp:,.2f}\".replace(\",\", \".\").replace(\".\", \",\", 1))\r\n \r\n     # Konversi ke USD\r\n     MonthlyCharges = monthly_rp / 16000\r\n     TotalCharges = total_rp / 16000\r\n"
                },
                {
                    "date": 1748166502488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n st.sidebar.header(\"üìù Isi Data Pelanggan\")\r\n \r\n def user_input():\r\n     SeniorCitizen = st.sidebar.radio(\"Apakah pelanggan berusia 60 tahun ke atas?\", ['Iya', 'Tidak'])\r\n-\r\n     Partner = st.sidebar.radio(\"Memiliki pasangan (suami/istri)?\", ['Iya', 'Tidak'])\r\n     Dependents = st.sidebar.radio(\"Memiliki tanggungan (anak/orang tua)?\", ['Iya', 'Tidak'])\r\n     PhoneService = st.sidebar.radio(\"Menggunakan layanan telepon rumah?\", ['Iya', 'Tidak'])\r\n     MultipleLines = st.sidebar.selectbox(\"Layanan telepon ganda (lebih dari satu jalur)?\", ['Tidak ada layanan telepon', 'Iya', 'Tidak'])\r\n"
                }
            ],
            "date": 1748160907356,
            "name": "Commit-0",
            "content": "import streamlit as st\r\nimport pandas as pd\r\nimport joblib\r\n\r\n# Load trained model\r\nmodel = joblib.load('model.pkl')\r\n\r\nst.title(\"Prediksi Churn Pelanggan Telco üì±\")\r\n\r\nst.write(\"Masukkan data pelanggan untuk memprediksi apakah pelanggan akan churn atau tidak.\")\r\n\r\n# Form input data\r\nwith st.form(\"churn_form\"):\r\n    SeniorCitizen = st.selectbox(\"Apakah pelanggan lansia?\", [\"Yes\", \"No\"])\r\n    Partner = st.selectbox(\"Memiliki pasangan?\", [\"Yes\", \"No\"])\r\n    Dependents = st.selectbox(\"Memiliki tanggungan?\", [\"Yes\", \"No\"])\r\n    PhoneService = st.selectbox(\"Menggunakan layanan telepon?\", [\"Yes\", \"No\"])\r\n    MultipleLines = st.selectbox(\"Multiple Lines\", [\"Yes\", \"No\", \"No phone service\"])\r\n    InternetService = st.selectbox(\"Jenis layanan internet\", [\"DSL\", \"Fiber optic\", \"No\"])\r\n    OnlineSecurity = st.selectbox(\"Online Security\", [\"Yes\", \"No\", \"No internet service\"])\r\n    OnlineBackup = st.selectbox(\"Online Backup\", [\"Yes\", \"No\", \"No internet service\"])\r\n    DeviceProtection = st.selectbox(\"Device Protection\", [\"Yes\", \"No\", \"No internet service\"])\r\n    TechSupport = st.selectbox(\"Tech Support\", [\"Yes\", \"No\", \"No internet service\"])\r\n    StreamingTV = st.selectbox(\"Streaming TV\", [\"Yes\", \"No\", \"No internet service\"])\r\n    StreamingMovies = st.selectbox(\"Streaming Movies\", [\"Yes\", \"No\", \"No internet service\"])\r\n    Contract = st.selectbox(\"Jenis kontrak\", [\"Month-to-month\", \"One year\", \"Two year\"])\r\n    PaperlessBilling = st.selectbox(\"Paperless Billing?\", [\"Yes\", \"No\"])\r\n    PaymentMethod = st.selectbox(\"Metode Pembayaran\", [\r\n        \"Electronic check\", \"Mailed check\", \"Bank transfer (automatic)\", \"Credit card (automatic)\"\r\n    ])\r\n    MonthlyCharges = st.number_input(\"Monthly Charges\", min_value=0.0)\r\n    TotalCharges = st.number_input(\"Total Charges\", min_value=0.0)\r\n    tenure_group = st.selectbox(\"Tenure Group (lama berlangganan)\", [\r\n        \"1 - 12\", \"13 - 24\", \"25 - 36\", \"37 - 48\", \"49 - 60\", \"61 - 72\"\r\n    ])\r\n\r\n    submitted = st.form_submit_button(\"Prediksi\")\r\n\r\n# Ketika tombol ditekan\r\nif submitted:\r\n    input_dict = {\r\n        'SeniorCitizen': 1 if SeniorCitizen == \"Yes\" else 0,\r\n        'Partner': Partner,\r\n        'Dependents': Dependents,\r\n        'PhoneService': PhoneService,\r\n        'MultipleLines': MultipleLines,\r\n        'InternetService': InternetService,\r\n        'OnlineSecurity': OnlineSecurity,\r\n        'OnlineBackup': OnlineBackup,\r\n        'DeviceProtection': DeviceProtection,\r\n        'TechSupport': TechSupport,\r\n        'StreamingTV': StreamingTV,\r\n        'StreamingMovies': StreamingMovies,\r\n        'Contract': Contract,\r\n        'PaperlessBilling': PaperlessBilling,\r\n        'PaymentMethod': PaymentMethod,\r\n        'MonthlyCharges': MonthlyCharges,\r\n        'TotalCharges': TotalCharges,\r\n        'tenure_group': tenure_group\r\n    }\r\n\r\n    # Konversi ke DataFrame\r\n    df_input = pd.DataFrame([input_dict])\r\n\r\n    # One-hot encoding\r\n    cat_cols = df_input.select_dtypes(include='object').columns\r\n    df_encoded = pd.get_dummies(df_input, columns=cat_cols)\r\n\r\n    # Lengkapi fitur yang dibutuhkan model\r\n    model_features = model.get_booster().feature_names\r\n    for col in set(model_features) - set(df_encoded.columns):\r\n        df_encoded[col] = 0\r\n    df_encoded = df_encoded[model_features]\r\n\r\n    # Prediksi\r\n    prediction = model.predict(df_encoded)[0]\r\n    proba = model.predict_proba(df_encoded)[0][1]\r\n\r\n    if prediction == 1:\r\n        st.error(f\"‚ö†Ô∏è Pelanggan kemungkinan akan **CHURN** (Probabilitas: {proba:.2f})\")\r\n    else:\r\n        st.success(f\"‚úÖ Pelanggan kemungkinan **TIDAK CHURN** (Probabilitas: {proba:.2f})\")\r\n"
        }
    ]
}